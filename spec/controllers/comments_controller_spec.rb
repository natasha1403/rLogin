require 'spec_helper'
include Warden::Test::Helpers                        
Warden.test_mode!                                    


# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe CommentsController, type: :controller do


  before(:each) do
    request.env["HTTP_REFERER"] = '/comments'
    sign_out :user
  end

  def login_user
    @user = FactoryGirl.create(:user)  
    sign_in @user
  end

  describe "GET index" do
    it "has a 200 status code" do
      login_user
      get :index
      expect(response.status).to eq(200)
    end
  end

  describe "GET show" do
    it "assigns the requested comment as @comment" do
      login_user
      @comment = FactoryGirl.create(:comment)
      get :show, {id: @comment.id}
      expect(assigns(:comment)).to eq(@comment)
    end
  end

  describe "GET new" do
    it "assigns a new comment as @comment" do
      login_user
      get :new, {}
      expect(assigns(:comment)).to be_a_new(Comment)
    end
  end

  describe "GET edit" do
    it "assigns the requested comment as @comment" do
      login_user
      @comment = FactoryGirl.create(:comment)
      get :edit, {id: @comment.id}
      expect(assigns(:comment)).to eq(@comment)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Comment" do
        login_user
        @comment = FactoryGirl.create(:comment)
        expect {
          post :create, {comment: @comment.attributes}
        }.to change(Comment, :count).by(1)
      end

      it "assigns a newly created comment as @comment" do
        login_user
        @comment = FactoryGirl.create(:comment)
        post :create, {comment: @comment.attributes}
        expect(@comment).to be_a(Comment)
        expect(@comment).to be_persisted
      end

      it "redirects to the created comment" do
        login_user
        @comment = FactoryGirl.create(:comment)
        request.env["HTTP_REFERER"] = '/comments/' + @comment.id.to_s
        post :create, {comment: @comment.attributes}
        # post :create, {comment: valid_attributes}, valid_session
        expect(response).to redirect_to('/comments/' + @comment.id.to_s) #Comment.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved comment as @comment" do
        login_user
        @comment = FactoryGirl.create(:comment)
        @comment.content = nil
        post :create, {comment: @comment.attributes}
        expect(@comment).to be_a(Comment)
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested comment" do
        @comment = FactoryGirl.create(:comment)
        login_user
        put :update, {id: @comment.id, comment: @comment.attributes}
        @comment.reload
      end

      it "assigns the requested comment as @comment" do
        login_user
        @comment = FactoryGirl.create(:comment)
        put :update, {id: @comment.id, comment: @comment.attributes}
        expect(assigns(:comment)).to eq(@comment)
      end

      it "redirects to the comment" do
         login_user
        @comment = FactoryGirl.create(:comment)
        put :update, {id: @comment.id, comment: @comment.attributes}
        expect(response).to redirect_to(Comment.last)
      end
    end

    describe "with invalid params" do
      it "assigns the comment as @comment" do
        login_user
        @comment = FactoryGirl.create(:comment)
        @comment.content = nil
        put :update, {id: @comment.id, comment: @comment.attributes}
        expect(assigns(:comment)).to eq(@comment)
      end

      it "re-renders the 'edit' template" do
        login_user
        @comment = FactoryGirl.create(:comment)
        @comment.content = nil
        put :update, {id: @comment.id, comment: @comment.attributes}
        expect(response).to render_template("comments/edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested comment" do
      login_user
      @comment = FactoryGirl.create(:comment)
      expect {
        delete :destroy, {id: @comment.id}
      }.to change(Comment, :count).by(-1)
    end

    it "redirects to the comments list" do
      login_user
      @comment = FactoryGirl.create(:comment)
      delete :destroy, {id: @comment.id}
      expect(response).to redirect_to(comments_url)
    end
  end
end
